function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));

var defaultUserAgents = ['Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0', 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:57.0) Gecko/20100101 Firefox/57.0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:73.0) Gecko/20100101 Firefox/73.0', 'Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0', 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/37.0 Mobile/15E148 Safari/605.1.15', 'Mozilla/5.0 (iPad; CPU OS 11_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/37.0 Mobile/15E148 Safari/605.1.15'];
var defaultOptions = {
  guestToken: '',
  bearerToken: '',
  maxRetries: 3,
  log: false,
  userAgents: defaultUserAgents
};
var getInitialOptions = function getInitialOptions(options) {
  var finalOptions = defaultOptions;
  Object.entries(finalOptions).forEach(function (_ref) {
    var index = _ref[0];

    if (typeof options[index] !== 'undefined') {
      finalOptions[index] = options[index];
    }
  });
  return finalOptions;
};

var getApiClientInstance = function getApiClientInstance() {
  return axios.create({
    headers: {
      Host: 'twitter.com',
      origin: 'https://twitter.com',
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0',
      Accept: '*/*',
      'Accept-Language': 'es-AR,es;q=0.8,en-US;q=0.5,en;q=0.3',
      'Accept-Encoding': 'gzip, deflate',
      'x-twitter-active-user': 'yes',
      DNT: '1',
      Connection: 'keep-alive',
      Pragma: 'no-cache',
      'Cache-Control': 'no-cache',
      TE: 'Trailers',
      'sec-fetch-dest': 'empty',
      'sec-fetch-mode': 'cors',
      'sec-fetch-site': 'same-site'
    }
  });
};

var getGuestToken = function getGuestToken() {
  try {
    return Promise.resolve(axios.get('https://mobile.twitter.com/', {
      withCredentials: true,
      headers: {
        'User-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0',
        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        Host: 'mobile.twitter.com',
        'Accept-Encoding': 'gzip, deflate',
        DNT: '1',
        Connection: 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        origin: 'https://mobile.twitter.com',
        referer: 'https://mobile.twitter.com'
      }
    })).then(function (response) {
      var tokenMatch = response.data.match(/decodeURIComponent\("gt=([^;]+);/);
      var token = tokenMatch ? tokenMatch[1] : null;
      return token;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var getBearerToken = function getBearerToken(userAgent) {
  try {
    return Promise.resolve(axios.get('https://abs.twimg.com/responsive-web/web/main.92eeeb04.js', {
      headers: {
        'User-agent': userAgent
      }
    })).then(function (response) {
      var tokenMatch = response.data.match(/s="(AAAAAA[^"]+)"/);
      var token = tokenMatch ? tokenMatch[1] : null;
      return token;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var buildSearchQueryString = function buildSearchQueryString(query) {
  var q = '';

  if (query.terms !== undefined) {
    q = query.terms;
  }

  if (query.dateFrom !== undefined) {
    q += " since:" + query.dateFrom;
  }

  if (query.dateTo !== undefined) {
    q += " until:" + query.dateTo;
  }

  if (query.minReplies !== undefined) {
    q += " min_replies:" + query.minReplies;
  }

  if (query.minRetweets !== undefined) {
    q += " min_retweets:" + query.minRetweets;
  }

  if (query.minFaves !== undefined) {
    q += " min_faves:" + query.minFaves;
  }

  if (query.lang !== undefined) {
    q += " lang:" + query.lang;
  }

  return q;
};

var getSearchParams = function getSearchParams(query, maxTweets, pageToken) {
  var params = {
    include_profile_interstitial_type: 1,
    include_blocking: 1,
    include_blocked_by: 1,
    include_followed_by: 1,
    include_want_retweets: 1,
    include_mute_edge: 1,
    include_can_dm: 1,
    include_can_media_tag: 1,
    skip_status: 1,
    cards_platform: 'Web-12',
    include_cards: 1,
    include_ext_alt_text: true,
    include_quote_count: true,
    include_reply_count: 1,
    tweet_mode: 'extended',
    include_entities: true,
    include_user_entities: true,
    include_ext_media_color: true,
    include_ext_media_availability: true,
    send_error_codes: true,
    simple_quoted_tweet: true,
    q: buildSearchQueryString(query),
    count: maxTweets,
    query_source: 'typed_query',
    pc: 1,
    spelling_corrections: 1,
    ext: 'mediaStats,highlightedLabel'
  };

  if (pageToken) {
    params.cursor = pageToken;
  }

  return params;
};

var getSearchHeaders = function getSearchHeaders(query, lang) {
  return {
    Referer: 'https://twitter.com/search?q=' + query.terms + '&src=typed_query',
    'x-twitter-client-language': lang
  };
};

var clientSearch = function clientSearch(instance, query, maxTweets, pageToken) {
  try {
    var searchParmas = getSearchParams(query, maxTweets, pageToken);
    var queryUrl = 'https://twitter.com/i/api/2/search/adaptive.json';
    var lang = query.lang || 'en';
    var headers = getSearchHeaders(query, lang);
    return Promise.resolve(instance.get(queryUrl, {
      params: searchParmas,
      headers: headers
    })).then(function (response) {
      return response.data;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var getNextToken = function getNextToken(d) {
  var _d$timeline;

  var instructions = d === null || d === void 0 ? void 0 : (_d$timeline = d.timeline) === null || _d$timeline === void 0 ? void 0 : _d$timeline.instructions;

  if (!(instructions !== null && instructions !== void 0 && instructions.length)) {
    return undefined;
  }

  var lastInstruction = instructions[instructions.length - 1];

  if (lastInstruction.addEntries) {
    return getTokenFromAddEntry(lastInstruction);
  }

  return undefined;
};

var getTokenFromAddEntry = function getTokenFromAddEntry(entry) {
  var _last$content$operati;

  var entries = entry.addEntries.entries;
  var last = entries[entries.length - 1];
  return ((_last$content$operati = last.content.operation) === null || _last$content$operati === void 0 ? void 0 : _last$content$operati.cursor.value) || undefined;
};

var parseSearch = function parseSearch(d) {
  var result = {
    users: d.globalObjects.users,
    tweets: d.globalObjects.tweets,
    nextToken: getNextToken(d)
  };
  return result;
};

var hashflagHeaders = {
  Host: 'pbs.twimg.com',
  Accept: '*/*',
  'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0',
  'Accept-Language': 'en-US,en;q=0.5',
  'Accept-Encoding': 'gzip, deflate, br',
  Origin: 'https://mobile.twitter.com',
  DNT: '1',
  Connection: 'keep-alive',
  Referer: 'https://mobile.twitter.com/',
  'Sec-Fetch-Dest': 'empty',
  'Sec-Fetch-Mode': 'cors',
  'Sec-Fetch-Site': 'cross-site'
};
var getHashflags = function getHashflags(date) {
  try {
    return Promise.resolve(axios.get("https://pbs.twimg.com/hashflag/config-" + date + "-01.json", {
      headers: hashflagHeaders
    })).then(function (_ref) {
      var data = _ref.data;
      return data;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var testUsername = function testUsername(username) {
  if (typeof username !== 'string') {
    return false;
  }

  return /^([A-Za-z]+[A-Za-z0-9-_]+)$/.test(username);
};
var getUser = function getUser(instance, username) {
  try {
    if (!testUsername(username)) {
      throw new Error('Invalid username');
    }

    return Promise.resolve(instance.get("https://twitter.com/i/api/graphql/B-dCk4ph5BZ0UReWK590tw/UserByScreenName?variables={\"screen_name\":\"" + username + "\",\"withSafetyModeUserFields\":true,\"withSuperFollowsUserFields\":false}")).then(function (_ref) {
      var data = _ref.data;
      return data;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};
var getUserById = function getUserById(instance, userId) {
  try {
    return Promise.resolve(instance.get("https://twitter.com/i/api/graphql/WN6Hck-Pwm-YP0uxVj1oMQ/UserByRestIdWithoutResults?variables={\"userId\":\"" + userId + "\",\"withHighlightedLabel\":true}")).then(function (_ref2) {
      var data = _ref2.data;
      return data;
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var TwitterClient = function TwitterClient(options) {
  var _this2 = this,
      _this3 = this,
      _this4 = this,
      _this5 = this,
      _this6 = this,
      _this7 = this,
      _this8 = this,
      _this9 = this;

  var _this = this;

  if (options === void 0) {
    options = {};
  }

  this.userAgent = '';

  this.setOptions = function (options) {
    var finalOptions = getInitialOptions(options);
    _this.guestToken = finalOptions.guestToken;
    _this.bearerToken = finalOptions.bearerToken;
    _this.maxRetries = finalOptions.maxRetries;
    _this.log = finalOptions.log;
    _this.userAgents = finalOptions.userAgents;
  };

  this.getNewUserAgent = function () {
    var n = _this.userAgents.length;

    var sel = _this.userAgents[Math.round(Math.random() * n - 1)];

    var selected = sel || 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:44.0) Gecko/20100101 Firefox/44.0';
    _this.userAgent = selected;
    _this.apiClient.defaults.headers['User-Agent'] = selected;

    _this.say("Setting new User-Agent: " + selected);

    return selected;
  };

  this.getBearerToken = function () {
    try {
      return Promise.resolve(getBearerToken(_this2.userAgent)).then(function (token) {
        if (token) {
          _this2.setBearerToken(token);

          return token;
        } else {
          throw new Error('Token not found.');
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.getGuestToken = function () {
    try {
      return Promise.resolve(getGuestToken()).then(function (token) {
        if (token) {
          _this3.setGuestToken(token);

          return token;
        } else {
          throw new Error('Token not found.');
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.setGuestToken = function (token) {
    _this.guestToken = token;
    _this.apiClient.defaults.headers['x-guest-token'] = _this.guestToken;
    _this.guestTokenUpdatedAt = Math.floor(Date.now() / 1000);

    _this.say('New guest token setted.');
  };

  this.setBearerToken = function (token) {
    _this.bearerToken = token;
    _this.bearerTokenUpdatedAt = Math.floor(Date.now() / 1000);
    _this.apiClient.defaults.headers.authorization = "Bearer " + _this.bearerToken;

    _this.say('New bearer token setted.');
  };

  this.connect = function () {
    try {
      _this4.say('Connecting...');

      return Promise.resolve(_this4.getBearerToken()).then(function () {
        return Promise.resolve(_this4.getGuestToken()).then(function () {
          _this4.say('Connected to twitter');
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.say = function (message) {
    if (_this.log) {
      console.log(message);
    }
  };

  this.search = function (query, maxTweets, pageToken) {
    if (maxTweets === void 0) {
      maxTweets = 100;
    }

    try {
      _this5.say('Searching...');

      return Promise.resolve(clientSearch(_this5.apiClient, query, maxTweets, pageToken)).then(function (data) {
        var result = parseSearch(data);

        _this5.say('Searched tweets');

        return result;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.searchRaw = function (query, maxTweets, pageToken) {
    if (maxTweets === void 0) {
      maxTweets = 100;
    }

    try {
      _this6.say('Searching...');

      return Promise.resolve(clientSearch(_this6.apiClient, query, maxTweets, pageToken)).then(function (data) {
        _this6.say('Searched tweets');

        return data;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.getUser = function (username) {
    try {
      if (typeof username !== 'string') {
        throw new Error('Username must be string.');
      }

      var name = username.replace('@', '');

      _this7.say("Getting user: " + name);

      return Promise.resolve(getUser(_this7.apiClient, name)).then(function (data) {
        _this7.say('User OK');

        return data;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.getUserById = function (userId) {
    try {
      _this8.say("Getting user by id: " + userId);

      return Promise.resolve(getUserById(_this8.apiClient, userId)).then(function (data) {
        _this8.say('User OK');

        return data;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.getHashflags = function (date) {
    try {
      _this9.say('Getting hashflags...');

      return Promise.resolve(getHashflags(date)).then(function (data) {
        _this9.say('Hashflags OK');

        return data;
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  this.setOptions(options);
  this.apiClient = getApiClientInstance();
  this.getNewUserAgent();
};

var getTweetsFromUsername = function getTweetsFromUsername(username) {
  return Promise.resolve(username);
};
var getTweetsFromUserId = function getTweetsFromUserId(userId, count) {
  if (count === void 0) {
    count = 300;
  }

  var url = "https://mobile.twitter.com/i/api/graphql/Lya9A5YxHQxhCQJ5IPtm7A/UserTweets?variables={\"userId\":\"" + userId + "\",\"count\":" + count + ",\"withTweetQuoteCount\":true,\"includePromotedContent\":true,\"withSuperFollowsUserFields\":false,\"withUserResults\":true,\"withBirdwatchPivots\":false,\"withReactionsMetadata\":false,\"withReactionsPerspective\":false,\"withSuperFollowsTweetFields\":false,\"withVoice\":true}";
  return Promise.resolve(url);
};

(function (Resize) {
  Resize["Crop"] = "crop";
  Resize["Fit"] = "fit";
})(exports.Resize || (exports.Resize = {}));

(function (Type) {
  Type["Photo"] = "photo";
  Type["Video"] = "video";
})(exports.Type || (exports.Type = {}));

(function (AdvertiserAccountType) {
  AdvertiserAccountType["None"] = "none";
  AdvertiserAccountType["PromotableUser"] = "promotable_user";
})(exports.AdvertiserAccountType || (exports.AdvertiserAccountType = {}));

(function (ProfileSidebarBorderColor) {
  ProfileSidebarBorderColor["C0Deed"] = "C0DEED";
  ProfileSidebarBorderColor["Ffffff"] = "FFFFFF";
  ProfileSidebarBorderColor["The000000"] = "000000";
})(exports.ProfileSidebarBorderColor || (exports.ProfileSidebarBorderColor = {}));

(function (ProfileSidebarFillColor) {
  ProfileSidebarFillColor["Ddeef6"] = "DDEEF6";
  ProfileSidebarFillColor["F5Deb3"] = "F5DEB3";
  ProfileSidebarFillColor["The000000"] = "000000";
})(exports.ProfileSidebarFillColor || (exports.ProfileSidebarFillColor = {}));

(function (TranslatorType) {
  TranslatorType["None"] = "none";
  TranslatorType["Regular"] = "regular";
})(exports.TranslatorType || (exports.TranslatorType = {}));

(function (REnum) {
  REnum["Missing"] = "Missing";
})(exports.REnum || (exports.REnum = {}));

(function (Status) {
  Status["Available"] = "available";
})(exports.Status || (exports.Status = {}));

(function (ContentType) {
  ContentType["ApplicationXMPEGURL"] = "application/x-mpegURL";
  ContentType["VideoMp4"] = "video/mp4";
})(exports.ContentType || (exports.ContentType = {}));

(function (Lang) {
  Lang["En"] = "en";
})(exports.Lang || (exports.Lang = {}));

(function (Component) {
  Component["ConversationModule"] = "conversation_module";
  Component["Result"] = "result";
  Component["UserModule"] = "user_module";
})(exports.Component || (exports.Component = {}));

(function (PurpleElement) {
  PurpleElement["Tweet"] = "tweet";
  PurpleElement["User"] = "user";
})(exports.PurpleElement || (exports.PurpleElement = {}));

(function (DisplayType) {
  DisplayType["Tweet"] = "Tweet";
})(exports.DisplayType || (exports.DisplayType = {}));

(function (Action) {
  Action["Click"] = "click";
})(exports.Action || (exports.Action = {}));

(function (FluffyElement) {
  FluffyElement["FeedbackGivefeedback"] = "feedback_givefeedback";
  FluffyElement["FeedbackNotcredible"] = "feedback_notcredible";
  FluffyElement["FeedbackNotrelevant"] = "feedback_notrelevant";
})(exports.FluffyElement || (exports.FluffyElement = {}));

(function (Reason) {
  Reason["ThisTweetSNotHelpful"] = "This Tweet's not helpful";
})(exports.Reason || (exports.Reason = {}));

(function (FeedbackKey) {
  FeedbackKey["Givefeedback"] = "givefeedback";
})(exports.FeedbackKey || (exports.FeedbackKey = {}));

exports.clientSearch = clientSearch;
exports.default = TwitterClient;
exports.defaultUserAgents = defaultUserAgents;
exports.getApiClientInstance = getApiClientInstance;
exports.getBearerToken = getBearerToken;
exports.getGuestToken = getGuestToken;
exports.getHashflags = getHashflags;
exports.getInitialOptions = getInitialOptions;
exports.getNextToken = getNextToken;
exports.getTweetsFromUserId = getTweetsFromUserId;
exports.getTweetsFromUsername = getTweetsFromUsername;
exports.getUser = getUser;
exports.getUserById = getUserById;
exports.hashflagHeaders = hashflagHeaders;
exports.parseSearch = parseSearch;
exports.testUsername = testUsername;
//# sourceMappingURL=index.js.map
