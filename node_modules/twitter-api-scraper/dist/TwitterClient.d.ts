import { ClientOptionsInterface } from './utils/getInitialOptions';
import { AxiosInstance } from 'axios';
import { SearchQuery } from './utils/clientSearch';
import { ParsedSearchResult } from './utils/parseSearch';
import { SearchResults } from './types/searchResults';
import { Hashflag } from './utils/getHashflags';
import { UserInterface } from './types/userInterface';
import { UserFromId } from './types/userFromIdInterface';
export default class TwitterClient {
    expiredToken: boolean;
    guestToken: string;
    guestTokenUpdatedAt: number;
    bearerToken: string;
    bearerTokenUpdatedAt: number;
    maxRetries: number;
    log: boolean;
    userAgents: string[];
    language: string;
    userAgent: string;
    apiClient: AxiosInstance;
    constructor(options?: ClientOptionsInterface);
    setOptions: (options: ClientOptionsInterface) => void;
    getNewUserAgent: () => string;
    getBearerToken: () => Promise<string>;
    getGuestToken: () => Promise<string>;
    setGuestToken: (token: string) => void;
    setBearerToken: (token: string) => void;
    connect: () => Promise<void>;
    private say;
    search: (query: SearchQuery, maxTweets?: number, pageToken?: string | undefined) => Promise<ParsedSearchResult>;
    searchRaw: (query: SearchQuery, maxTweets?: number, pageToken?: string | undefined) => Promise<SearchResults>;
    getUser: (username: string) => Promise<UserInterface>;
    getUserById: (userId: string | number) => Promise<UserFromId>;
    getHashflags: (date: string) => Promise<Hashflag[]>;
}
